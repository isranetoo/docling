import json
import os
import time
import requests
import re
import PyPDF2
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from scrappers.utils.generic_driver import GenericDriver
from scrappers.utils.parsing import parse_cnj, parse_nome, POLO_TIPOS

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
TEMP_DIR = os.path.join(BASE_DIR, "temp")
TEMP_FILE = os.path.join(TEMP_DIR, "temp_processo.pdf")


def split_text_into_lines(text):
    """Faz um split no texto do PDF por linhas.

    Args:
        text (str): Texto a ser dividido em linhas.

    Returns:
        list: Lista de linhas do texto.
    """
    return text.split('\n')


def extract_text_before_keywords(pdf_path):
    """Extrai o texto do PDF antes de palavras-chave específicas.

    Args:
        pdf_path (str): Caminho para o arquivo PDF.

    Returns:
        tuple: Texto extraído antes das palavras-chave e um dicionário com os resultados.
    """
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)

            if len(pdf_reader.pages) < 2:
                return "Error: PDF must have at least 2 pages.", None

            full_text = pdf_reader.pages[1].extract_text()
            print(f"Full text from page 2 of {pdf_path}:\n{full_text}\n")
            lines = split_text_into_lines(full_text)

            keywords = ['VOTO', 'Ementa', 'Falência']
            positions = [full_text.lower().find(keyword.lower()) for keyword in keywords]
            valid_positions = [pos for pos in positions if pos != -1]

            if not valid_positions:
                print(full_text)
                return full_text, None

            first_keyword_pos = min(valid_positions)
            extracted_text = full_text[:first_keyword_pos].strip()
            print(f"Extracted text before keywords from {pdf_path}:\n{extracted_text}\n")

            nomes_a_procurar = set().union(*POLO_TIPOS.values())
            resultados = {}

            for nome in nomes_a_procurar:
                for line in lines:
                    match = re.search(rf'(?i){nome}: (.+)', line)
                    if match:
                        for polo, nomes in POLO_TIPOS.items():
                            if nome in nomes:
                                if polo not in resultados:
                                    resultados[polo] = {}
                                resultados[polo][nome] = match.group(1)
                        break

            print(f"Resultados from {pdf_path}:\n{resultados}\n")
            return extracted_text, resultados

    except FileNotFoundError:
        return "Error: PDF file not found.", None
    except Exception as e:
        return f"Error processing PDF: {str(e)}", None


def process_pdf(pdf_path):
    """Processa o PDF para extrair o texto antes de palavras-chave específicas.

    Args:
        pdf_path (str): Caminho para o arquivo PDF.

    Returns:  
        dict: Dicionário com os resultados do processamento do PDF.
    """
    text, results = extract_text_before_keywords(pdf_path)
    return results if results else {}


class BotScrapperJuris(GenericDriver):
    """Classe para realizar scraping de processos no site do TJ-SP.

    Args:
        **args: Argumentos para inicializar a classe base GenericDriver e definir a palavra-chave de busca.

    Returns:
        None
    """
    def __init__(self, **args):
        """Inicializa a instância do BotScrapperJuris.

        Args:
            **args: Argumentos para inicializar a classe base GenericDriver e definir a palavra-chave de busca.

        Returns:
            None
        """
        self.palavra_chave = args['keyword']
        self._init_directories()
        super().__init__(**args)
        self.driver.maximize_window()
        self.captcha_uuid = self.get_captcha_uuid()


    def _init_directories(self):
        """Inicializa os diretórios necessários se eles não existirem."""
        if not os.path.exists(TEMP_DIR):
            os.makedirs(TEMP_DIR)
            print(f"Diretório temporário criado em: {TEMP_DIR}")


    def get_captcha_uuid(self):
        """Obtém o UUID do captcha da sessão.

        Returns:
            str: UUID do captcha ou None se não for encontrado.
        """
        try:
            response = requests.get("https://esaj.tjsp.jus.br/cjsg/captchaControleAcesso.do")
            if response.status_code == 200:
                captcha_uuid = response.json().get('uuidCaptcha')
                if captcha_uuid:
                    print(f"Captcha UUID obtido: {captcha_uuid}")
                    return captcha_uuid
                else:
                    print("UUID do captcha não encontrado na resposta.")
            else:
                print(f"Erro ao obter captcha UUID: {response.status_code}")
        except Exception as e:
            print(f"Erro ao obter captcha UUID: {str(e)}")
        return None

    def prepare(self):
        """Prepara o ambiente para o scraping."""
        pass

    def scrape(self):
        """Executa o scraping dos dados de processos no site do TJ-SP."""
        try:
            if not self.captcha_uuid:
                print("Captcha UUID não disponível. Abortando scraping.")
                return

            time.sleep(4)
            self.driver.get("https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do")
            time.sleep(5)

            self.driver.add_cookie({'name': 'uuidCaptcha', 'value': self.captcha_uuid})

            caixa_busca = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "dados.buscaInteiroTeor"))
            )
            caixa_busca.clear()
            time.sleep(6)
            caixa_busca.send_keys(self.palavra_chave)
            time.sleep(7)

            botao_de_pesquisa = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "pbSubmit"))
            )
            self.driver.execute_script("arguments[0].click();", botao_de_pesquisa)
            time.sleep(5)

            todos_dados_processo = []
            total_processos = 0
            MAX_PROCESSOS = 40
            MAX_PAGINAS = 2
            pagina_atual = 1

            while pagina_atual <= MAX_PAGINAS and total_processos < MAX_PROCESSOS:
                try:
                    print(f"Processando página {pagina_atual}")
                    dados_processo = self.extract_case_data()
                    if not dados_processo:
                        print("Não há mais resultados disponíveis")
                        break

                    todos_dados_processo.extend(dados_processo)
                    total_processos += len(dados_processo)

                    if total_processos >= MAX_PROCESSOS:
                        print(f"Limite de {MAX_PROCESSOS} processos atingido")
                        break

                    if pagina_atual < MAX_PAGINAS:
                        try:
                            if pagina_atual == 1:
                                proxima_pagina_xpath = '//*[@id="paginacaoSuperior-A"]/table/tbody/tr[1]/td[2]/div/a[5]'
                            else:
                                proxima_pagina_xpath = '//*[@id="paginacaoSuperior-A"]/table/tbody/tr[1]/td[2]/div/a[6]'

                            proxima_pagina = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.XPATH, proxima_pagina_xpath))
                            )
                            self.driver.execute_script("arguments[0].click();", proxima_pagina)
                            time.sleep(3)
                            pagina_atual += 1
                        except Exception as e:
                            print(f"Erro ao navegar para próxima página: {str(e)}")
                            break

                except Exception as e:
                    print(f"Erro ao processar página {pagina_atual}: {str(e)}")
                    break

            if todos_dados_processo:
                caminho_saida = os.path.join(os.path.dirname(os.path.dirname(__file__)), "esaj_tjsp_jus.json")
                with open(caminho_saida, "w", encoding="utf-8") as file:
                    json.dump(todos_dados_processo, file, ensure_ascii=False, indent=4)
                print(f"Dados salvos em: {caminho_saida}")
            else:
                print("Nenhum dado foi coletado para salvar")

        except Exception as e:
            print(f"Erro durante o scraping: {str(e)}")
        finally:
            self.driver.quit()

    def transform(self):
        """Transforma os dados coletados."""
        pass

    def download_pdf(self, cdacordao, numero_processo):
        """Baixa o arquivo PDF usando o número do cdAcordao e salva com o número do processo.

        Args:
            cdacordao (str): Código do acórdão.
            numero_processo (str): Número do processo.

        Returns:
            tuple: Caminho do PDF baixado e os resultados do processamento do PDF.
        """
        if not os.path.exists(TEMP_DIR):
            os.makedirs(TEMP_DIR)
            
        url = f"https://esaj.tjsp.jus.br/cjsg/getArquivo.do?cdAcordao={cdacordao}&cdForo=0"
        caminho_pdf = os.path.join(TEMP_DIR, f"{numero_processo}.pdf")
        
        try:
            print(f"Baixando PDF para o processo {numero_processo} de: {url}")
            response = requests.get(url)
            if response.status_code == 200:
                with open(caminho_pdf, 'wb') as f:
                    f.write(response.content)
                print(f"PDF salvo com sucesso: {caminho_pdf}")
                
                resultados_pdf = process_pdf(caminho_pdf)
                return caminho_pdf, resultados_pdf
            else:
                print(f"Falha ao baixar PDF. Código de status: {response.status_code}")
                return None, None
        except Exception as e:
            print(f"Erro ao baixar PDF: {str(e)}")
            return None, None

    def get_cdacordao(self, pdf_element):
        """Extrai o cdAcordao do link do PDF.

        Args:
            pdf_element (WebElement): Elemento do PDF.

        Returns:
            str: Código do acórdão ou None se não for encontrado.
        """
        try:
            cdacordao = pdf_element.get_attribute('cdacordao')
            if cdacordao:
                print(f"Encontrado cdAcordao: {cdacordao}")
                return cdacordao
            return None
        except Exception as e:
            print(f"Erro ao extrair cdAcordao: {str(e)}")
            return None

    def extract_case_data(self):
        """Coleta os dados da página de processos.

        Returns:
            list: Lista de dicionários contendo os dados dos processos.
        """
        resultados = []

        try:
            tabela = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "divDadosResultado-A"))
            )

            for i in range(1, 21):
                try:
                    processo_xpath = f'//*[@id="divDadosResultado-A"]/table/tbody/tr[{i}]/td[2]/table/tbody/tr[1]/td/a[1]'
                    elemento_processo = tabela.find_element(By.XPATH, processo_xpath)
                    numero_processo = elemento_processo.text

                    elemento_pdf = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located(
                            (By.CSS_SELECTOR, f'#divDadosResultado-A table tbody tr:nth-child({i}) td:nth-child(2) table tbody tr:first-child td a[cdacordao]')
                        )
                    )
                    cdacordao = self.get_cdacordao(elemento_pdf)
                    caminho_pdf = None
                    resultados_pdf = None
                    if cdacordao:
                        caminho_pdf, _ = self.download_pdf(cdacordao, numero_processo)
                        if caminho_pdf:
                            resultados_pdf = process_pdf(caminho_pdf)
                        else:
                            resultados_pdf = {}

                    codigo_area, codigo_tribunal, codigo_vara, ano, area, tribunal = parse_cnj(numero_processo)

                    classe_assunto = tabela.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[2]/td"
                    ).text
                    classe_assunto = classe_assunto.replace("Classe/Assunto: ", "")
                    classe, assunto = classe_assunto.split("/", 1) if "/" in classe_assunto else (classe_assunto, "")

                    relator = tabela.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[3]/td"
                    ).text
                    relator = relator.replace("Relator(a): ", "")
                    nome_relator = parse_nome(relator)

                    comarca = tabela.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[4]/td"
                    ).text
                    comarca = comarca.replace("Comarca: ", "")

                    orgao_julgador = tabela.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[5]/td"
                    ).text
                    orgao_julgador = orgao_julgador.replace("Órgão julgador: ", "")

                    dados_processo = {
                        "numero": numero_processo,
                        "area_code": codigo_area,
                        "tribunal_code": codigo_tribunal,
                        "vara_code": codigo_vara,
                        "ano": ano,
                        "area": area,
                        "tribunal": tribunal,
                        "comarca": comarca,
                        "valor_da_causa": None,
                        "fontes": [{
                            "provider": "Interno",
                            "script": "Scrapper",
                            "sistema": "TJ-SP",
                            "tipo": "TRIBUNAL",
                            "instancias": [{
                                "url": "https://esaj.tjsp.jus.br/",
                                "grau": None,
                                "classe": classe,
                                "orgao_julgador": orgao_julgador,
                                "justica_gratuita": None,
                                "assunto_principal": assunto,
                                "assuntos": f"{classe}/{assunto}",
                                "envolvidos": [
                                    {
                                        "nome": "",  
                                        "tipo": "RECLAMANTE",
                                        "polo": "ATIVO",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": [{
                                            "nome": None,
                                            "tipo": "ADVOGADO",
                                            "polo": "ATIVO",
                                            "id_sistema": {"login": None},
                                            "documento": [{"CPF": None}],
                                            "endereco": {
                                                "logradouro": None,
                                                "numero": None,
                                                "complemento": None,
                                                "bairro": None,
                                                "municipio": None,
                                                "estado": None,
                                                "cep": None
                                            }
                                        }]
                                    },
                                    {
                                        "nome": "",  
                                        "tipo": "RECLAMADO",
                                        "polo": "PASSIVO",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": [{
                                            "nome": None,
                                            "tipo": "ADVOGADO",
                                            "polo": "PASSIVO",
                                            "id_sistema": {"login": None},
                                            "documento": [{"CPF": None}],
                                            "endereco": {
                                                "logradouro": None,
                                                "numero": None,
                                                "complemento": None,
                                                "bairro": None,
                                                "municipio": None,
                                                "estado": None,
                                                "cep": None
                                            }
                                        }]
                                    },
                                    {
                                        "nome": nome_relator,
                                        "tipo": "RELATOR(A)",
                                        "polo": "OUTROS",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": []
                                    }
                                ],
                                "movimentacoes": []
                            }]
                        }],
                    }

                    if resultados_pdf and isinstance(resultados_pdf, dict):
                        for polo, nomes in resultados_pdf.items():
                            for nome, texto in nomes.items():
                                if polo == "ATIVO":
                                    dados_processo["fontes"][0]["instancias"][0]["envolvidos"][0]["nome"] = texto
                                    dados_processo["fontes"][0]["instancias"][0]["envolvidos"][0]["tipo"] = nome
                                elif polo == "PASSIVO":
                                    dados_processo["fontes"][0]["instancias"][0]["envolvidos"][1]["nome"] = texto
                                    dados_processo["fontes"][0]["instancias"][0]["envolvidos"][1]["tipo"] = nome

                    resultados.append(dados_processo)

                except Exception as e:
                    print(f"Processo {i} não encontrado ou erro ao processar: {str(e)}")
                    continue

            return resultados

        except Exception as e:
            print(f"Erro ao coletar dados da tabela: {str(e)}")
            return []

