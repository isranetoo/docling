
import json
import os
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from scrappers.utils.preprocessing import preprocess_text, filter_text

from scrappers.utils.generic_driver import GenericDriver
from scrappers.utils.parsing import parse_cnj, parse_nome

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
#TEMP_DIR = os.path.join(BASE_DIR, "temp")
#TEMP_FILE = os.path.join(TEMP_DIR, "temp_processo.pdf")


class BotScraperJuris(GenericDriver):
    def __init__(self, **args):
        self.keyword = args['keyword']
#        self._init_directories()
        super().__init__(**args)
        self.driver.maximize_window()

#    def _init_directories(self):
#        """Inicialize os diretórios necessários se eles não existirem."""
#        if not os.path.exists(TEMP_DIR):
#            os.makedirs(TEMP_DIR)
#            print(f"Created temp directory at: {TEMP_DIR}")

    def prepare(self):
        pass

    def scrape(self):
        try:
            time.sleep(3)
            self.driver.get("https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do")
            
            time.sleep(4)

            caixa_busca = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "dados.buscaInteiroTeor"))
            )
            caixa_busca.clear()

            time.sleep(3)
            
            caixa_busca.send_keys(self.keyword)  

            time.sleep(4)

            botao_de_pesquisa = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "pbSubmit"))
            )
            self.driver.execute_script("arguments[0].click();", botao_de_pesquisa)
            time.sleep(4)

            all_case_data = []
            total_cases = 0
            MAX_CASES = 40
            MAX_PAGES = 2
            current_page = 1

            while current_page <= MAX_PAGES and total_cases < MAX_CASES:
                try:
                    print(f"Processando página {current_page}")
                    
                    case_data = self.extract_case_data()
                    if not case_data:
                        print("Não há mais resultados disponíveis")
                        break

                    all_case_data.extend(case_data)
                    total_cases += len(case_data)
                    
                    if total_cases >= MAX_CASES:
                        print(f"Limite de {MAX_CASES} casos atingido")
                        break

                    if current_page < MAX_PAGES:
                        try:
                            if current_page == 1:
                                next_page_xpath = '//*[@id="paginacaoSuperior-A"]/table/tbody/tr[1]/td[2]/div/a[5]'
                            else:
                                next_page_xpath = '//*[@id="paginacaoSuperior-A"]/table/tbody/tr[1]/td[2]/div/a[6]'
                            
                            next_page = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.XPATH, next_page_xpath))
                            )
                            self.driver.execute_script("arguments[0].click();", next_page)
                            time.sleep(3)  
                            current_page += 1
                        except Exception as e:
                            print(f"Erro ao navegar para próxima página: {str(e)}")
                            break

                except Exception as e:
                    print(f"Erro ao processar página {current_page}: {str(e)}")
                    break

            if all_case_data:
                output_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "esaj_tjsp_jus.json")
                with open(output_path, "w", encoding="utf-8") as file:
                    json.dump(all_case_data, file, ensure_ascii=False, indent=4)
                print(f"Dados salvos em: {output_path}")
            else:
                print("Nenhum dado foi coletado para salvar")

        except Exception as e:
            print(f"Erro durante o scraping: {str(e)}")
        finally:
            self.driver.quit()

    def transform(self):
        pass

    def extract_case_data(self):
        """Coleta os dados da página de processos."""
        results = []

        try:
            table = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "divDadosResultado-A"))
            )

            for i in range(1, 21):
                try:
                    pdf_element = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located(
                            (By.CSS_SELECTOR, f'#divDadosResultado-A table tbody tr:nth-child({i}) td:nth-child(2) table tbody tr:first-child td a[cdacordao]')
                        )
                    )
                    
                    processo_xpath = f'//*[@id="divDadosResultado-A"]/table/tbody/tr[{i}]/td[2]/table/tbody/tr[1]/td/a[1]'
                    processo_element = table.find_element(By.XPATH, processo_xpath)
                    numero_processo = processo_element.text                    
                    
                    area_code, tribunal_code, vara_code, ano, area, tribunal = parse_cnj(numero_processo)

                    classe_assunto = table.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[2]/td"
                    ).text
                    classe_assunto = classe_assunto.replace("Classe/Assunto: ", "")
                    classe, assunto = classe_assunto.split("/", 1) if "/" in classe_assunto else (classe_assunto, "")

                    relator = table.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[3]/td"
                    ).text
                    relator = relator.replace("Relator(a): ", "")
                    nome_relator = parse_nome(relator)

                    comarca = table.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[4]/td"
                    ).text
                    comarca = comarca.replace("Comarca: ", "")

                    orgao_julgador = table.find_element(
                        By.XPATH, f".//tr[{i}]/td[2]/table/tbody/tr[5]/td"
                    ).text
                    orgao_julgador = orgao_julgador.replace("Órgão julgador: ", "")

                    case_data = {
                        "numero": numero_processo,
                        "area_code": area_code,
                        "tribunal_code": tribunal_code,
                        "vara_code": vara_code,
                        "ano": ano,
                        "area": area,
                        "tribunal": tribunal,
                        "comarca": comarca,
                        "valor_da_causa": None,
                        "fontes": [{
                            "provider": "Interno",
                            "script": "Scrapper",
                            "sistema": "TJ-SP",
                            "tipo": "TRIBUNAL",
                            "instancias": [{
                                "url": "https://esaj.tjsp.jus.br/",
                                "grau": None,
                                "classe": classe,
                                "orgao_julgador": orgao_julgador,
                                "justica_gratuita": None,
                                "assunto_principal": assunto,
                                "assuntos": f"{classe}/{assunto}",
                                "envolvidos": [
                                    {
                                        "nome": "",  
                                        "tipo": "RECLAMANTE",
                                        "polo": "ATIVO",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": [{
                                            "nome": None,
                                            "tipo": "ADVOGADO",
                                            "polo": "ATIVO",
                                            "id_sistema": {"login": None},
                                            "documento": [{"CPF": None}],
                                            "endereco": {
                                                "logradouro": None,
                                                "numero": None,
                                                "complemento": None,
                                                "bairro": None,
                                                "municipio": None,
                                                "estado": None,
                                                "cep": None
                                            }
                                        }]
                                    },
                                    {
                                        "nome": "",  
                                        "tipo": "RECLAMADO",
                                        "polo": "PASSIVO",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": [{
                                            "nome": None,
                                            "tipo": "ADVOGADO",
                                            "polo": "PASSIVO",
                                            "id_sistema": {"login": None},
                                            "documento": [{"CPF": None}],
                                            "endereco": {
                                                "logradouro": None,
                                                "numero": None,
                                                "complemento": None,
                                                "bairro": None,
                                                "municipio": None,
                                                "estado": None,
                                                "cep": None
                                            }
                                        }]
                                    },
                                    {
                                        "nome": nome_relator,
                                        "tipo": "RELATOR(A)",
                                        "polo": "OUTROS",
                                        "id_sistema": {"login": None},
                                        "documento": [],
                                        "endereco": {},
                                        "representantes": []
                                    }
                                ],
                                "movimentacoes": []
                            }]
                        }],
                    }
                    
                    results.append(case_data)

                except Exception as e:
                    print(f"Processo {i} não encontrado ou erro ao processar: {str(e)}")
                    continue

            return results

        except Exception as e:
            print(f"Erro ao coletar dados da tabela: {str(e)}")
            return []
